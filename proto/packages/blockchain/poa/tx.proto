syntax = "proto3";
package packages.blockchain.poa;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "google/protobuf/any.proto";
import "amino/amino.proto";

option go_package = "github.com/xrplevm/node/v3/x/poa/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Adds a new validator into the authority
  rpc AddValidator(MsgAddValidator) returns (MsgAddValidatorResponse);
  // Removes an existing validator from the authority
  rpc RemoveValidator(MsgRemoveValidator) returns (MsgRemoveValidatorResponse);
}

// MsgAddValidator defines a message for adding a new validator
message MsgAddValidator {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_address = 2
      [ (amino.dont_omitempty) = false, (cosmos_proto.scalar) = "cosmos.AddressString" ];
  cosmos.staking.v1beta1.Description description = 3
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  google.protobuf.Any pubkey = 4
      [ (cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey" ];
}
// MsgAddValidatorResponse defines the response for adding a new validator
message MsgAddValidatorResponse {}

// MsgRemoveValidator defines a message for removing an existing validator
message MsgRemoveValidator {
  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}
// MsgRemoveValidatorResponse defines the response for removing an existing
// validator
message MsgRemoveValidatorResponse {}
